The given  mywc.c file  contains a C program that implements the subset of the wc command described above. Translate that program into ARMv8 assembly language, thus creating a file named mywc.s. Your mywc.s program must be an accurate translation of mywc.c. In particular, note that the given mywc.c program uses global variables, and so your mywc.s must use global variables too. That is, your mywc.s program must store data in the DATA and/or BSS sections. Your assembly language program must behave exactly the same (i.e. must write exactly the same characters to stdout) as the given C program does.

Part 1b: Test
Compose data files   that, when read by your mywc.s program, perform boundary tests, statement tests, and stress tests of that program. Name each test file such that its prefix is mywc and its suffix is .txt. Thus, the command ls mywc*.txt must display the names of all test files, and only those files.

Note that the logic   implemented by your mywc.s program must be identical to the logic implemented by the given mywc.c program. So, for the sake of simplicity, let's assume that any test file that boundary/statement/stress tests mywc.c also boundary/statement/stress tests mywc.s.


In a more realistic context, some of your test files should contain character codes that are not valid in ASCII. However, in the context of this assignment, submit test files that contain character codes for only ASCII printable characters. Specifically, make sure your computer-generated test files contain only the character codes (in hexadecimal) 09, 0A, and 20 through 7E (inclusive). It would be difficult for your grader to examine files that contain other character codes.

You may submit as many test files as you want. However at most three of your test files may be large, and a large test file must contain no more than 50000 characters and no more than 1000 lines. It would be difficult for your grader to scroll through a test file that exceeds those limits.

To test your mywc.s   program, make sure that it writes the same output as mywc.c does when given each your test files as input. The given testmywc and testmywcdiff are Bash shell scripts that automate your testing. Comments at the beginning of those files describe how to use them. After copying the scripts to your project directory, you may need to execute the commands chmod 700 testmywc and chmod 700 testmywcdiff to give them "executable" permissions.

Part 2b: Add BigInt   Objects Using C Code Built with Compiler Optimization
Suppose you decide that the amount of CPU time consumed is unacceptably large. You decide to instruct the compiler to optimize the code that it produces...

Build the fib program using optimization. Specifically, build with the -D NDEBUG option so the preprocessor disables the assert macro, and with the -O (that's an upper case letter, not a digit) option so the compiler generates optimized code. Run the resulting program to compute fib(250000). In your readme file note the amount of CPU time consumed.

Part 2c: Profile the Code
Suppose you decide that the amount of CPU time consumed still is too large. You decide to investigate by doing a gprof analysis to determine which functions are consuming the most time...

Perform a gprof analysis of the executable binary file from Part 2b. Save the textual report in a file named performance. Don't delete the file; as described later in this document, you must submit that file.

Part 2d: Add BigInt Objects Using Assembly Language Code
Suppose, not surprisingly, your gprof analysis shows that most CPU time is spent executing the BigInt_add function. In an attempt to gain speed, you decide to code the BigInt_add function manually in assembly language...

Manually translate the C code in the bigintadd.c file into ARMv8 assembly language, thus creating the file bigintadd.s. Do not translate the code in other files into assembly language.

Your assembly language code must store all parameters and local variables defined in the BigInt_larger and BigInt_add functions in memory, on the stack.

Note that assert is a parameterized macro, not a function. (See Section 14.3 of the King book for a description of parameterized macros.) So assembly language code cannot call assert. When translating bigintadd.c to assembly language, simply pretend that the calls of assert are not in the C code.